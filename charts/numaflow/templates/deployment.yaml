apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.controller.name }}
  labels:
    {{- include "numaflow.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.controller.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-manager
      app.kubernetes.io/name: controller-manager
      app.kubernetes.io/part-of: numaflow
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller-manager
        app.kubernetes.io/name: controller-manager
        app.kubernetes.io/part-of: numaflow
    spec:
      containers:
        - args:
            - controller
          env:
            - name: NUMAFLOW_IMAGE
              value: {{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: {{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}
          imagePullPolicy: {{ .Values.controller.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          name: controller-manager
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/numaflow
              name: controller-config-volume
      securityContext:
        runAsNonRoot: true
        runAsUser: 9737
      serviceAccountName: {{ .Values.controller.serviceAccount }}
      volumes:
        - configMap:
            name: {{ .Values.controller.configMap.name }}
          name: controller-config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.dexServer.name }}
  labels:
    {{- include "numaflow.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: dex-server
      app.kubernetes.io/name: numaflow-dex-server
      app.kubernetes.io/part-of: numaflow
  template:
    metadata:
      labels:
        app.kubernetes.io/component: dex-server
        app.kubernetes.io/name: numaflow-dex-server
        app.kubernetes.io/part-of: numaflow
    spec:
      containers:
        - command:
            - /usr/local/bin/dex
            - serve
            - /etc/numaflow/dex/cfg/config.yaml
          env:
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: dex-github-client-id
                  name: {{ .Values.dexServer.secret.name }}
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: dex-github-client-secret
                  name: {{ .Values.dexServer.secret.name }}
          image: {{ .Values.dexServer.image.repository }}:{{ .Values.dexServer.image.tag }}
          imagePullPolicy: {{ .Values.dexServer.image.pullPolicy }}
          name: dex
          ports:
            - containerPort: 5556
          volumeMounts:
            - mountPath: /etc/numaflow/dex/cfg
              name: config
      serviceAccountName: {{ .Values.dexServer.serviceAccount }}
      volumes:
        - configMap:
            items:
              - key: config.yaml
                path: config.yaml
            name: {{ .Values.dexServer.configMap }}
          name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.server.name }}
  labels:
    {{- include "numaflow.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: numaflow-ux
      app.kubernetes.io/name: numaflow-ux
      app.kubernetes.io/part-of: numaflow
  template:
    metadata:
      labels:
        app.kubernetes.io/component: numaflow-ux
        app.kubernetes.io/name: numaflow-ux
        app.kubernetes.io/part-of: numaflow
    spec:
      containers:
        - args:
            - server
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $value := .Values.server.envsFromConfigMap }}
            - name: {{ $value.name }}
              valueFrom:
                configMapKeyRef:
                  key: {{ $value.key}}
                  name: {{ $.Values.server.cmdConfigName }}
                  optional: {{ $value.optional }}
            {{- end }}
          image: {{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /livez
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 3
          name: main
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          {{- with .Values.server.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      initContainers:
        - args:
            - server-init
          env:
            - name: NUMAFLOW_SERVER_BASE_HREF
              valueFrom:
                configMapKeyRef:
                  key: server.base.href
                  name: {{ .Values.server.cmdConfigName }}
                  optional: true
          image: {{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          name: server-init
          volumeMounts:
            - mountPath: /opt/numaflow
              name: env-volume
      securityContext:
        runAsNonRoot: true
        runAsUser: 9737
      serviceAccountName: {{ .Values.server.serviceAccount }}
      volumes:
        - emptyDir: {}
          name: env-volume
        - configMap:
            name: {{ .Values.server.rbacConfigName }}
          name: rbac-config